public class WildcardMatching {
    public static boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        
        // Initialize first row (dp[0][j]) based on pattern
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 1];
            }
        }
        
        // Fill the dp table
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j - 1) == '?' || p.charAt(j - 1) == s.charAt(i - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p.charAt(j - 1) == '*') {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
            }
        }
        
        return dp[m][n];
    }
    
    public static void main(String[] args) {
        String string1 = "XYXZZXY";
        String pattern1 = "X***Y";
        System.out.println("Output 1: " + isMatch(string1, pattern1)); // true
        
        String string2 = "XYXZZXY";
        String pattern2 = "X***X";
        System.out.println("Output 2: " + isMatch(string2, pattern2)); // false
        
        String string3 = "XYXZZXY";
        String pattern3 = "X***X?";
        System.out.println("Output 3: " + isMatch(string3, pattern3)); // true
        
        String string4 = "XYXZZXY";
        String pattern4 = "*";
        System.out.println("Output 4: " + isMatch(string4, pattern4)); // true
    }
}
